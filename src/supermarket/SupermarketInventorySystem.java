/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package supermarket;

import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author android1
 */
public class SupermarketInventorySystem extends javax.swing.JFrame {

    private String currentUser;

    /**
     * Creates new form ProductsList
     */
    public SupermarketInventorySystem() {
        initComponents();

        setCurrency("AFN", 70.5); // Example: 1 USD = 71.5 AFN (update as needed)

        setResizable(false);
        // After initComponents() or in formWindowOpened
        receipt_area.setEditable(false); // Add this line
        DAL d = new DAL();
        Object[][] categories = d.select("SELECT DISTINCT category FROM products");
        JcomboBox1.removeAllItems();
        for (int i = 0; i < categories.length; i++) {
            JcomboBox1.addItem(categories[i][0].toString());
        }

    }

    private double exchangeRate = 1.0; // Default: no conversion (USD)
    private String currencySymbol = "$"; // Default: Dollar

    public SupermarketInventorySystem(String username) {
        this();
        this.currentUser = username;
    }

    public void setCurrency(String symbol, double rate) {
        this.currencySymbol = symbol;
        this.exchangeRate = rate;
    }

    private void comboBoxCategoryChanged() {
        Object selectedObj = JcomboBox1.getSelectedItem();
        if (selectedObj == null) {
            return;
        }
        String selectedCategory = selectedObj.toString();
        DAL d = new DAL();
        String query;
        if ("All".equals(selectedCategory)) {
            query = "SELECT product_id, product_name, unit_price, unit, category, product_date, expire_date FROM products";
        } else {
            query = "SELECT product_id, product_name, unit_price, unit, category, product_date, expire_date FROM products WHERE category = '" + selectedCategory + "'";
        }
        String[] name = {"ID", "Name", "Price", "Unit", "Category", "Product Date", "Expire Date"};
        Object[][] products = d.select(query);
        DefaultTableModel model = new DefaultTableModel(products, name) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        TableProductList.setModel(model);
        jLabel19.setText("Total Products: " + model.getRowCount());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        back = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableProductList = new javax.swing.JTable();
        srchbyCategory = new javax.swing.JTextField();
        JcomboBox1 = new javax.swing.JComboBox<>();
        btnSrc = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        quantity_field = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        receipt_area = new javax.swing.JTextArea();
        btnPrintReceipt = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        refreshBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel9.setFont(new java.awt.Font("Poppins SemiBold", 1, 36)); // NOI18N
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8-inventory-100.png"))); // NOI18N
        jLabel9.setText("Supermarket Inventory System");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 30, 710, 100));

        back.setFont(new java.awt.Font("JetBrains Mono", 0, 18)); // NOI18N
        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8-back-48 (1).png"))); // NOI18N
        back.setText("Back");
        back.setBorder(new javax.swing.border.MatteBorder(null));
        back.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMouseClicked(evt);
            }
        });
        jPanel1.add(back, new org.netbeans.lib.awtextra.AbsoluteConstraints(1330, 10, 120, 60));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1460, 160));

        jPanel2.setBackground(new java.awt.Color(255, 204, 204));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TableProductList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TableProductList);
        if (TableProductList.getColumnModel().getColumnCount() > 0) {
            TableProductList.getColumnModel().getColumn(0).setResizable(false);
        }

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 130, 800, 610));

        srchbyCategory.setFont(new java.awt.Font("JetBrains Mono", 0, 18)); // NOI18N
        srchbyCategory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                srchbyCategoryKeyPressed(evt);
            }
        });
        jPanel2.add(srchbyCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 380, 40));

        jPanel2.add(JcomboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 170, 30));

        btnSrc.setBackground(new java.awt.Color(255, 153, 153));
        btnSrc.setFont(new java.awt.Font("JetBrains Mono", 0, 20)); // NOI18N
        btnSrc.setText("Search");
        btnSrc.setBorder(new javax.swing.border.MatteBorder(null));
        btnSrc.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSrc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSrcActionPerformed(evt);
            }
        });
        btnSrc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnSrcKeyPressed(evt);
            }
        });
        jPanel2.add(btnSrc, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 150, 140, 40));

        btnReset.setBackground(new java.awt.Color(255, 153, 153));
        btnReset.setFont(new java.awt.Font("JetBrains Mono", 0, 20)); // NOI18N
        btnReset.setText("Reset");
        btnReset.setBorder(new javax.swing.border.MatteBorder(null));
        btnReset.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        btnReset.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnResetKeyPressed(evt);
            }
        });
        jPanel2.add(btnReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, 140, 40));

        jLabel17.setFont(new java.awt.Font("JetBrains Mono", 1, 20)); // NOI18N
        jLabel17.setText("Enter the Quantity:");
        jPanel2.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, -1, 30));

        jLabel18.setFont(new java.awt.Font("JetBrains Mono", 1, 20)); // NOI18N
        jLabel18.setText("Search by:");
        jPanel2.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, 30));

        quantity_field.setFont(new java.awt.Font("JetBrains Mono", 0, 18)); // NOI18N
        jPanel2.add(quantity_field, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 520, 40));

        receipt_area.setColumns(20);
        receipt_area.setFont(new java.awt.Font("JetBrains Mono", 0, 24)); // NOI18N
        receipt_area.setRows(5);
        jScrollPane2.setViewportView(receipt_area);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 610, 250));

        btnPrintReceipt.setBackground(new java.awt.Color(255, 153, 153));
        btnPrintReceipt.setFont(new java.awt.Font("JetBrains Mono", 0, 20)); // NOI18N
        btnPrintReceipt.setText("Print the Receipt");
        btnPrintReceipt.setBorder(new javax.swing.border.MatteBorder(null));
        btnPrintReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintReceiptActionPerformed(evt);
            }
        });
        jPanel2.add(btnPrintReceipt, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 590, 270, 50));

        btnEdit.setBackground(new java.awt.Color(255, 153, 153));
        btnEdit.setFont(new java.awt.Font("JetBrains Mono", 0, 20)); // NOI18N
        btnEdit.setText("Edit");
        btnEdit.setBorder(new javax.swing.border.MatteBorder(null));
        btnEdit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        btnEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnEditKeyPressed(evt);
            }
        });
        jPanel2.add(btnEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 80, 140, 40));

        btnDelete.setBackground(new java.awt.Color(255, 153, 153));
        btnDelete.setFont(new java.awt.Font("JetBrains Mono", 0, 20)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.setBorder(new javax.swing.border.MatteBorder(null));
        btnDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        btnDelete.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnDeleteKeyPressed(evt);
            }
        });
        jPanel2.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 80, 140, 40));

        btnAdd.setBackground(new java.awt.Color(255, 153, 153));
        btnAdd.setFont(new java.awt.Font("JetBrains Mono", 0, 20)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.setBorder(new javax.swing.border.MatteBorder(null));
        btnAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        btnAdd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnAddKeyPressed(evt);
            }
        });
        jPanel2.add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(1300, 80, 140, 40));

        jLabel19.setFont(new java.awt.Font("JetBrains Mono", 1, 20)); // NOI18N
        jLabel19.setText("Total Products:");
        jPanel2.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 30, -1, 30));

        refreshBtn.setBackground(new java.awt.Color(255, 153, 153));
        refreshBtn.setFont(new java.awt.Font("JetBrains Mono", 0, 20)); // NOI18N
        refreshBtn.setText("Refresh");
        refreshBtn.setBorder(new javax.swing.border.MatteBorder(null));
        refreshBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });
        refreshBtn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                refreshBtnKeyPressed(evt);
            }
        });
        jPanel2.add(refreshBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 80, 140, 40));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 1460, 750));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Helper.Tools.setCenter(this);

        DAL d = new DAL();
        Object[][] products = d.select(
                "SELECT product_id, product_name, unit_price, unit, category, product_date, expire_date FROM products"
        );
        String[] name = {"ID", "Name", "Price", "Unit", "Category", "Product Date", "Expire Date"};
        DefaultTableModel model = new DefaultTableModel(products, name) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        TableProductList.setModel(model);
        jLabel19.setText("Total Products: " + model.getRowCount());
        TableProductList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(TableProductList);

        Object[][] categories = d.select("SELECT DISTINCT category FROM products");
        JcomboBox1.removeAllItems();
        JcomboBox1.addItem("All");
        for (int i = 0; i < categories.length; i++) {
            JcomboBox1.addItem(categories[i][0].toString());
        }

        JcomboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxCategoryChanged();
            }
        });

    }//GEN-LAST:event_formWindowOpened


    private void srchbyCategoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_srchbyCategoryKeyPressed
        // TODO add your handling code here:

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnSrc.doClick();
        }
    }//GEN-LAST:event_srchbyCategoryKeyPressed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        int selectedRow = TableProductList.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to edit.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) TableProductList.getModel();

        Object nameObj = model.getValueAt(selectedRow, 1);
        Object priceObj = model.getValueAt(selectedRow, 2);
        Object unitObj = model.getValueAt(selectedRow, 3);
        Object categoryObj = model.getValueAt(selectedRow, 4);
        Object productDateObj = model.getValueAt(selectedRow, 5);
        Object expireDateObj = model.getValueAt(selectedRow, 6);

        String currentName = nameObj != null ? nameObj.toString() : "";
        String currentPrice = priceObj != null ? priceObj.toString() : "";
        String currentUnit = unitObj != null ? unitObj.toString() : "";
        String currentCategory = categoryObj != null ? categoryObj.toString() : "";
        String currentProductDate = productDateObj != null ? productDateObj.toString() : "";
        String currentExpireDate = expireDateObj != null ? expireDateObj.toString() : "";

        String newName = JOptionPane.showInputDialog(this, "Edit Name:", currentName);
        if (newName == null) {
            return;
        }
        String newPrice = JOptionPane.showInputDialog(this, "Edit Price:", currentPrice);
        if (newPrice == null) {
            return;
        }
        String newUnit = JOptionPane.showInputDialog(this, "Edit Unit (e.g., kg, ml, pcs):", currentUnit);
        if (newUnit == null) {
            return;
        }
        String newCategory = JOptionPane.showInputDialog(this, "Edit Category:", currentCategory);
        if (newCategory == null) {
            return;
        }
        String newProductDate = JOptionPane.showInputDialog(this, "Edit Product Date (YYYY-MM-DD):", currentProductDate);
        if (newProductDate == null) {
            return;
        }
        String newExpireDate = JOptionPane.showInputDialog(this, "Edit Expire Date (YYYY-MM-DD):", currentExpireDate);
        if (newExpireDate == null) {
            return;
        }

        model.setValueAt(newName, selectedRow, 1);
        model.setValueAt(newPrice, selectedRow, 2);
        model.setValueAt(newUnit, selectedRow, 3);
        model.setValueAt(newCategory, selectedRow, 4);
        model.setValueAt(newProductDate, selectedRow, 5);
        model.setValueAt(newExpireDate, selectedRow, 6);

        String productId = model.getValueAt(selectedRow, 0).toString();
        DAL d = new DAL();
        String sql = "UPDATE products SET product_name='" + newName + "', unit_price='" + newPrice + "', unit='" + newUnit + "', category='" + newCategory + "', product_date='" + newProductDate + "', expire_date='" + newExpireDate + "' WHERE product_id='" + productId + "'";
        d.execute(sql);
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnEditKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnEditKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEditKeyPressed

    private void btnSrcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSrcActionPerformed
        String selectedCategory = JcomboBox1.getSelectedItem().toString();
        String searchValue = srchbyCategory.getText().trim();

        if (searchValue.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a value to search.");
            return;
        }

        String query;
        if ("All".equals(selectedCategory)) {
            query = "SELECT product_id, product_name, unit_price, unit, category, product_date, expire_date FROM products WHERE product_name LIKE '%" + searchValue + "%'";
        } else {
            query = "SELECT product_id, product_name, unit_price, unit, category, product_date, expire_date FROM products WHERE category = '" + selectedCategory + "' AND product_name LIKE '%" + searchValue + "%'";
        }

        DAL d = new DAL();
        Object[][] products = d.select(query);
        String[] name = {"ID", "Name", "Price", "Unit", "Category", "Product Date", "Expire Date"};
        DefaultTableModel model = new DefaultTableModel(products, name) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        TableProductList.setModel(model);
        jLabel19.setText("Total Products: " + model.getRowCount());

    }//GEN-LAST:event_btnSrcActionPerformed

    private void btnSrcKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSrcKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSrcKeyPressed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = TableProductList.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this item?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            DefaultTableModel model = (DefaultTableModel) TableProductList.getModel();

            // Get the product ID (assuming first column is ID)
            String productId = model.getValueAt(selectedRow, 0).toString();

            // Delete from database
            DAL d = new DAL();
            String sql = "DELETE FROM products WHERE product_id = '" + productId + "'";
            d.execute(sql); // Implement this method in your DAL class

            // Remove from the table
            model.removeRow(selectedRow);
        }

    }//GEN-LAST:event_btnDeleteActionPerformed


    private void btnDeleteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnDeleteKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteKeyPressed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        DefaultTableModel model = (DefaultTableModel) TableProductList.getModel();

        String name = JOptionPane.showInputDialog(this, "Enter Product Name:");
        if (name == null || name.trim().isEmpty()) {
            return;
        }

        String price = JOptionPane.showInputDialog(this, "Enter Product Price:");
        if (price == null || price.trim().isEmpty()) {
            return;
        }

        String unit = JOptionPane.showInputDialog(this, "Enter Unit (e.g., kg, ml, pcs):");
        if (unit == null || unit.trim().isEmpty()) {
            return;
        }

        String category = JOptionPane.showInputDialog(this, "Enter Category:");
        if (category == null || category.trim().isEmpty()) {
            return;
        }

        String productDate = JOptionPane.showInputDialog(this, "Enter Product Date (YYYY-MM-DD):");
        if (productDate == null || productDate.trim().isEmpty()) {
            return;
        }

        String expireDate = JOptionPane.showInputDialog(this, "Enter Expire Date (YYYY-MM-DD):");
        if (expireDate == null || expireDate.trim().isEmpty()) {
            return;
        }

        Object[] newRow = new Object[]{null, name, price, unit, category, productDate, expireDate};
        model.addRow(newRow);

        DAL d = new DAL();
        String sql = "INSERT INTO products (product_name, unit_price, unit, category, product_date, expire_date) VALUES ('"
                + name + "', '" + price + "', '" + unit + "', '" + category + "', '" + productDate + "', '" + expireDate + "')";
        d.execute(sql);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnAddKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnAddKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddKeyPressed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        srchbyCategory.setText("");
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnResetKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnResetKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnResetKeyPressed

    private void btnPrintReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintReceiptActionPerformed
        try {
            int selectedRow = TableProductList.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a product from the table.");
                return;
            }

            String quantityText = quantity_field.getText().trim();
            if (quantityText.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter the quantity.");
                return;
            }

            int quantity;
            try {
                quantity = Integer.parseInt(quantityText);
                if (quantity <= 0) {
                    throw new NumberFormatException();
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Please enter a valid positive quantity.");
                return;
            }

            DefaultTableModel model = (DefaultTableModel) TableProductList.getModel();
            String productName = model.getValueAt(selectedRow, 1).toString();
            Object unitObj = model.getValueAt(selectedRow, 3);
            String productUnit = unitObj != null ? unitObj.toString() : "";
            String productCategory = model.getValueAt(selectedRow, 4).toString();
            double price = Double.parseDouble(model.getValueAt(selectedRow, 2).toString());
            double total = price * quantity;

            StringBuilder receipt = new StringBuilder();
            receipt.append("==== Bakhshi Supermarket Receipt ====\n");
            receipt.append("Product: ").append(productName).append("\n");
            receipt.append("Category: ").append(productCategory).append("\n");
            receipt.append("Unit: ").append(productUnit).append("\n");
            receipt.append("Unit Price: ").append(String.format("%.2f %s", price * exchangeRate, currencySymbol)).append(" per ").append(productUnit).append("\n");
            receipt.append("Quantity: ").append(quantity).append(" ").append(productUnit).append("\n");
            receipt.append("Total: ").append(String.format("%.2f %s", total * exchangeRate, currencySymbol)).append("\n");

            // User balance logic
            if (currentUser != null && !currentUser.trim().isEmpty()) {
                DAL d = new DAL();
                Object[][] balanceResult = d.select("SELECT balance FROM users WHERE username = '" + currentUser + "'");
                if (balanceResult.length == 0) {
                    receipt.append("User not found in database.\n");
                } else {
                    double balance = Double.parseDouble(balanceResult[0][0].toString());

                    if (balance < total) {
                        receipt.append("Balance: ").append(String.format("%.2f %s", balance * exchangeRate, currencySymbol)).append("\n");
                        receipt.append("Insufficient balance! Your balance is not sufficient for this purchase.\n");
                    } else {
                        double newBalance = balance - total;
                        // Update in database
                        String updateSql = "UPDATE users SET balance = '" + newBalance + "' WHERE username = '" + currentUser + "'";
                        d.execute(updateSql);

                        receipt.append("Remaining Balance after purchase: ").append(String.format("%.2f %s", newBalance * exchangeRate, currencySymbol)).append("\n");

                        // Record the purchase in the purchases table
                        Object[][] userIdResult = d.select("SELECT user_id FROM users WHERE username = '" + currentUser + "'");
                        if (userIdResult.length > 0) {
                            int userId = Integer.parseInt(userIdResult[0][0].toString());
                            String productId = model.getValueAt(selectedRow, 0).toString();

                            String insertPurchase = "INSERT INTO purchases (user_id, product_id, quantity, total_cost) VALUES ("
                                    + userId + ", "
                                    + productId + ", "
                                    + quantity + ", "
                                    + total + ")";
                            d.execute(insertPurchase);
                        }
                    }
                }
            }

            receipt.append("Happy selling : ")
                    .append(currentUser != null && !currentUser.trim().isEmpty() ? currentUser + " " : "")
                    .append("see you soon! :)").append("\n");

            receipt.append("============================\n");

            receipt_area.setText(receipt.toString());
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnPrintReceiptActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        DAL d = new DAL();
        Object[][] products = d.select(
                "SELECT product_id, product_name, unit_price, unit, category, product_date, expire_date FROM products"
        );
        String[] name = {"ID", "Name", "Price", "Unit", "Category", "Product Date", "Expire Date"};
        DefaultTableModel model = new DefaultTableModel(products, name) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        TableProductList.setModel(model);
        jLabel19.setText("Total Products: " + model.getRowCount());
        TableProductList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(TableProductList);

        // Optionally, reload categories and reset filters
        Object[][] categories = d.select("SELECT DISTINCT category FROM products");
        JcomboBox1.removeAllItems();
        JcomboBox1.addItem("All");
        for (int i = 0; i < categories.length; i++) {
            JcomboBox1.addItem(categories[i][0].toString());
        }
        srchbyCategory.setText(""); // Optionally clear the search field


    }//GEN-LAST:event_refreshBtnActionPerformed

    private void refreshBtnKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_refreshBtnKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshBtnKeyPressed

    private void backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseClicked
        // TODO add your handling code here:

        new Dashboard().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SupermarketInventorySystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SupermarketInventorySystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SupermarketInventorySystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SupermarketInventorySystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SupermarketInventorySystem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> JcomboBox1;
    private javax.swing.JTable TableProductList;
    private javax.swing.JLabel back;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnPrintReceipt;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSrc;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField quantity_field;
    private javax.swing.JTextArea receipt_area;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JTextField srchbyCategory;
    // End of variables declaration//GEN-END:variables
}
